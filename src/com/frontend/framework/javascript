JavaScript 事件参考手册
http://www.w3school.com.cn/jsref/jsref_events.asp

JavaScript HTML DOM 事件
http://www.w3school.com.cn/js/js_htmldom_events.asp
http://www.runoob.com/jsref/dom-obj-event.html

http://www.w3school.com.cn/jsref/dom_obj_document.asp
HTML DOM Document 对象

DOMContentLoaded事件是document对象上的事件。指的是DOM已经加载完毕。IE中有个私有的事件onreadystatechange事件跟这个标准事件类似。

原生JavaScript事件详解
http://www.cnblogs.com/iyangyuan/p/4190773.html

HTML中的window对象和document对象详解


https://doc.react-china.org/docs/hello-world.html
https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript--------------very good

JavaScript is a multi-paradigm, dynamic language with types and operators, standard built-in objects, and methods

Its syntax is based on the Java and C languages — many structures from those languages apply to JavaScript as well. 
JavaScript supports object-oriented programming with object prototypes, instead of classes

JavaScript also supports functional programming — functions are objects, giving functions the capacity to hold executable code and be passed around like any other object.
赋予函数保留可执行代码的能力，并像其他对象一样传递

looking at the building blocks of any language
看看任何语言的构建块

slightly odd
有点奇怪

Number
String
Boolean
Symbol (new in ES2015)
Object(Function,Array,Date,RegExp,built-in object( Math))
null
undefined
 built-in Error types 
 
 
 New variables in JavaScript are declared using one of three keywords: let, const, or var.
 let allows you to declare block-level variables.
 block-level variables
块级变量

const allows you to declare variables whose values are never intended to change. The variable is available from the block it is declared in.

 A variable declared with the var keyword is available from the function it is declared in.
 If you declare a variable without assigning any value to it, its type is undefined.
 
 123 == '123'; // true
1 == true; // true
To avoid type coercion, use the triple-equals operator:

123 === '123'; // false
1 === true;    // false
  
  
  JavaScript has a similar set of control structures to other languages 
  
  JavaScript has while loops and do-while loops. The first is good for basic looping; the second for loops where you wish to ensure that the body of the loop is executed at least once:
  
  JavaScript's for loop is the same as that in C and Java: it lets you provide the control information for your loop on a single line.
  
  JavaScript also contains two other prominent for loops: for...of

for (let value of array) {
  // do something with value
}
and for...in:

for (let property in object) {
  // do something with object property
}

switch (action) {
  case 'draw':
    drawIt();
    break;
  case 'eat':
    eatIt();
    break;
  default:
    doNothing();
}

Objects

JavaScript objects can be thought of as simple collections of name-value pairs. As such, they are similar to:

Dictionaries in Python.
Hashes in Perl and Ruby.
Hash tables in C and C++.
HashMaps in Java.
Associative arrays in PHP.

There are two basic ways to create an empty object:

var obj = new Object();
And:

var obj = {};


Object literal syntax can be used to initialize an object in its entirety:

var obj = {
  name: 'Carrot',
  for: 'Max', // 'for' is a reserved word, use '_for' instead.
  details: {
    color: 'orange',
    size: 12
  }
};
Attribute access can be chained together:

obj.details.color; // orange
obj['details']['size']; // 12

typeof a[90]; // undefined


If you want to append an item to an array simply do it like this:

a.push(item);
Arrays come with a number of methods. See also the full documentation for array methods.

Method name	Description
a.toString()	Returns a string with the toString() of each element separated by commas.
a.toLocaleString()	Returns a string with the toLocaleString() of each element separated by commas.
a.concat(item1[, item2[, ...[, itemN]]])	Returns a new array with the items added on to it.
a.join(sep)	Converts the array to a string — with values delimited by the sep param
a.pop()	Removes and returns the last item.
a.push(item1, ..., itemN)	Appends items to the end of the array.
a.reverse()	Reverses the array.
a.shift()	Removes and returns the first item.
a.slice(start[, end])	Returns a sub-array.
a.sort([cmpfn])	Takes an optional comparison function.
a.splice(start, delcount[, item1[, ...[, itemN]]])	Lets you modify an array by deleting a section and replacing it with more items.
a.unshift(item1[, item2[, ...[, itemN]]])	Prepends items to the start of the array.