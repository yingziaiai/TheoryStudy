http://tomfish88.iteye.com/blog/1497557
http://blog.csdn.net/lf_software_studio/article/details/8256510
1、@controller 控制器（注入服务）
2、@service 服务（注入dao）
3、@repository dao（实现dao访问）
4、@component （把普通pojo实例化到spring容器中，相当于配置文件中的<bean id="" class=""/>）

  @Component,@Service,@Controller,@Repository注解的类，并把这些类纳入进spring容器中管理。 
下面写这个是引入component的扫描组件 
<context:component-scan base-package=”com.mmnc”>    

其中base-package为需要扫描的包（含所有子包） 
       1、@Service用于标注业务层组件 
       2、@Controller用于标注控制层组件(如struts中的action) 
       3、@Repository用于标注数据访问组件，即DAO组件. 
       4、@Component泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注。    
           @Service public class UserServiceImpl implements UserService { } 
           @Repository public class UserDaoImpl implements UserDao { } getBean的默认名称是类名（头字母小写），如果想自定义，可以@Service(“***”)               这样来指定，这种bean默认是单例的，如果想改变，可以使用@Service(“beanName”) 
           @Scope(“prototype”)来改变。可以使用以下方式指定初始化方法和销毁方法（方法名任意）： @PostConstruct public void init() { } 
           
           
  Spring入门Blog[五、Spring容器组建注解@Component和Resouces实现完全注解配置] 
  http://blog.csdn.net/zhang6622056/article/details/7697876-----------------------****
  http://blog.csdn.net/windsunmoon/article/details/44498169-----------------***********
  
   <context:component-scan>使用说明 
   http://blog.csdn.net/chunqiuwei/article/details/16115135  
   
   spring 2.5 中除了提供 @Component 注释外，还定义了几个拥有特殊语义的注释，它们分别是：@Repository、@Service 和 @Controller。在目前的 Spring 版本中，这 3 个注释和 @Component 是等效的，但是从注释类的命名上，很容易看出这 3 个注释分别和持久层、业务层和控制层（Web 层）相对应。虽然目前这 3 个注释和 @Component 相比没有什么新意，但 Spring 将在以后的版本中为它们添加特殊的功能。所以，如果 Web 应用程序采用了经典的三层分层结构的话，最好在持久层、业务层和控制层分别采用 @Repository、@Service 和 @Controller 对分层中的类进行注释，而用 @Component 对那些比较中立的类进行注释。 

在一个稍大的项目中，通常会有上百个组件，如果这些组件采用xml的bean定义来配置，显然会增加配置文件的体积，查找以及维护起来也不太方便。 Spring2.5为我们引入了组件自动扫描机制，他可以在类路径底下寻找标注了@Component,@Service,@Controller,@Repository注解的类，并把这些类纳入进spring容器中管理。它的作用和在xml文件中使用bean节点配置组件时一样的。要使用自动扫描机制，我们需要打开以下配置信息： 
           
https://my.oschina.net/u/216467/blog/205951-----------------------******
 @Resource和@Autowired两者都是做bean的注入使用。

其实@Resource并不是Spring的注解，他的包是javax.annotation.Resource 需要导入。但是Spring支持该注解的注入。

共同点：两者都可以写在字段和setter方法上。两者如果都写在字段上，就不需要写写setter方法。

不同点如下：

先来说一说@Autowired

    @Autowired为Spring提供的注解，

    需导入Package:org.springframework.beans.factory.annotation.Autowired;

    只按照byType 注入。
    
    @Resource默认按 byName 自动注入,由J2EE提供。

    需导入Package:  javax.annotation.Resource
    
     @Resource装配顺序 

　 (1). 如果同时指定了name和type，则从Spring上下文中找到唯一匹配的bean进行装配，找不到则抛出异常;

　 (2). 如果指定了name，则从上下文中查找名称（id）匹配的bean进行装配，找不到则抛出异常;

　 (3). 如果指定了type，则从上下文中找到类型匹配的唯一bean进行装配，找不到或者找到多个，都会抛出异常;

　 (4). 如果既没有指定name，又没有指定type，则自动按照byName方式进行装配；如果没有匹配，则回退为一个原始类型进行匹配，如果匹配则自动装配；

    @Resource的作用相当于@Autowired，只不过@Autowired按byType自动注入。
    
    
    


           测试用法书法
           http://www.tuicool.com/articles/6JVJbiZ
           
           
 https://www.oschina.net/question/914559_149112 
两者的作用都是将request里的参数的值绑定到contorl里的方法参数里的，区别在于，url不同
@PathVariable的url是这样的:http://host:port/.../path/参数值
@RequestMapping("/bookings/{booking}")
 public String getBooking(@PathVariable Long booking) {

 }


而@RequestParam的url是这样的：http://host:port/.../path?参数名=参数值
@RequestMapping(method = RequestMethod.GET)
    public String setupForm(@RequestParam("petId") int petId, ModelMap model) {
        Pet pet = this.clinic.loadPet(petId);
        model.addAttribute("pet", pet);
        return "petForm";
    }         
           