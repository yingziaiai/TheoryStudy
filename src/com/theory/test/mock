http://www.cnblogs.com/God-/p/5857428.html
http://blog.csdn.net/liuchuanhong1/article/details/53495004----博文不错
http://www.2cto.com/kf/201607/528417.html

http://baidutech.blog.51cto.com/4114344/743740/------------何时使用
Mock方法介绍 

http://javabeat.net/spring-boot-testing/---英文示例与git code
https://github.com/sanaulla123/springboot-rest-api-demo/tree/master/src

官方：
http://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-testing.html
http://spring.io/guides/gs/testing-web/

Java Mocking入门—使用Mockito
http://www.importnew.com/10083.html


http://blog.jobbole.com/42300/
加速Java应用开发速度3：单元/集成测试+持续集成

基于mock对象和JUnit框架简化Spring Web组件单元测试 
http://blog.csdn.net/qbg19881206/article/details/17077021

http://www.cnblogs.com/alliswelltome/p/5948973.html


Java单元测试(Junit+Mock+代码覆盖率)
http://www.cnblogs.com/AloneSword/p/4109407.html
单元测试是编写测试代码，用来检测特定的、明确的、细颗粒的功能。单元测试并不一定保证程序功能是正确的，更不保证整体业务是准备的。

单元测试不仅仅用来保证当前代码的正确性，更重要的是用来保证代码修复、改进或重构之后的正确性。

一般来说，单元测试任务包括

    接口功能测试：用来保证接口功能的正确性。
    局部数据结构测试（不常用）：用来保证接口中的数据结构是正确的
        比如变量有无初始值
        变量是否溢出
    边界条件测试
        变量没有赋值（即为NULL）
        变量是数值（或字符)
            主要边界：最小值，最大值，无穷大（对于DOUBLE等）
            溢出边界（期望异常或拒绝服务）：最小值-1，最大值+1
            临近边界：最小值+1，最大值-1
        变量是字符串
            引用“字符变量”的边界
            空字符串
            对字符串长度应用“数值变量”的边界
        变量是集合
            空集合
            对集合的大小应用“数值变量”的边界
            调整次序：升序、降序
        变量有规律
            比如对于Math.sqrt，给出n^2-1，和n^2+1的边界
    所有独立执行通路测试：保证每一条代码，每个分支都经过测试
        代码覆盖率
            语句覆盖：保证每一个语句都执行到了
            判定覆盖（分支覆盖）：保证每一个分支都执行到
            条件覆盖：保证每一个条件都覆盖到true和false（即if、while中的条件语句）
            路径覆盖：保证每一个路径都覆盖到
        相关软件
            Cobertura：语句覆盖
            Emma: Eclipse插件Eclemma
    各条错误处理通路测试：保证每一个异常都经过测试



mock example code:
Java Code Examples for org.springframework.test.web.servlet.MockMvc
http://www.programcreek.com/java-api-examples/index.php?api=org.springframework.test.web.servlet.MockMvc
http://www.programcreek.com/java-api-examples/index.php?source_dir=extdirectspring-master/src/main/java/ch/ralscha/extdirectspring/controller/ApiController.java


https://github.com/lxchinesszz/multi-boluome/blob/master/pom.xml


http://www.2cto.com/kf/201608/537118.html
Spring Boot实战之单元测试


单元测试：
单元测试用于测试各个代码组件，并确保代码按照预期的方式工作。单元测试由开发人员编写和执行。大多数情况下，使用JUnit或TestNG之类的测试框架。测试用例通常是在方法级别写入并通过自动化执行
MockMvc对象提供一组工具函数用来执行assert判断，都是针对web请求的判断。这组工具的使用方式是函数的链式调用，允许程序员将多个测试用例链接在一起，并进行多个判断。在这个例子中我们用到下面的一些工具函数：


在springMVC中的controller写单元测试
http://www.xuebuyuan.com/1670119.html
http://www.lieliao.net/cmd/15310/-----------------very good

SpringBoot与JUnit+Mockito 单元测试
http://www.60kb.com/post/45.html


Java单元测试(Junit+Mock+代码覆盖率)
http://www.cnblogs.com/AloneSword/p/4109407.html

使用 EasyMock 更轻松地进行测试
https://www.ibm.com/developerworks/cn/java/j-easymock.html


 菜鸟学Java（二十一）——如何更好的进行单元测试——JUnit
 http://blog.csdn.net/liushuijinger/article/details/32140843
 
 零成本实现接口自动化测试 – Java+TestNG 测试Restful service
 http://www.cnblogs.com/wade-xu/p/4229805.html
 
 
TDD_Demo
基于Spring-WS的Restful API的集成测试
https://github.com/xianlinbox/TDD_Demo/blob/master/spring-ws-rest/src/test/java/com/xianlinbox/api/ApiControllerIntegrationTest.java


写测试用例时，如果只关注输入、输出或是否被调用，建议使用Mock框架
http://jingyan.baidu.com/article/37bce2be7f16b31003f3a260.html


Mockito：一个强大的用于Java开发的模拟测试框架
http://blog.csdn.net/zhoudaxia/article/details/33056093

使用 EasyMock 更轻松地进行测试
https://www.ibm.com/developerworks/cn/java/j-mocktest/
https://www.ibm.com/developerworks/cn/java/j-easymock.html

基于Spring-WS的Restful API的集成测试
http://ningandjiao.iteye.com/blog/1982635
https://github.com/xianlinbox/TDD_Demo/blob/master/spring-ws-rest/src/test/java/com/xianlinbox/api/ApiControllerIntegrationTest.java

Spring Boot实战之单元测试
http://www.2cto.com/kf/201608/537118.html

Spring Boot应用的测试——Mockito
https://yq.aliyun.com/articles/54061