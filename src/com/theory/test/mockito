http://sgq0085.iteye.com/blog/2031319---好的例子
Mockito 初探

Mockito使用指南
http://blog.csdn.net/shensky711/article/details/52771493---------------very good, dao

org.mockito
Interface ArgumentMatcher<T>

Mockito 中文文档 ( 2.0.26 beta )
http://blog.csdn.net/bboyfeiyu/article/details/52127551-----------good
http://site.mockito.org/

intellij code coverage （转）
http://www.cnblogs.com/xbyl/p/6035713.html-------------------good
使用intellij已经有一段时间了，苦于没有一个覆盖率查看工具。我们知道在eclipse下面有eclemma这一测试覆盖率查看工具，可以查看到你所写的测试用例覆盖到代码中的哪些行，非常的方便。


@Spy,@Mock, @InjectMocks
学习Mockito - Mockito对Annotation的支持
http://hotdog.iteye.com/blog/937862
http://www.baeldung.com/mockito-annotations


[译] 使用强大的 Mockito 来测试你的代码
http://www.jianshu.com/p/f6e3ab9719b9-----------------------very good
// 其他用来验证函数是否被调用的方法
        verify(mock, never()).someMethod("never called");
        verify(mock, atLeastOnce()).someMethod("called at least once");
        verify(mock, atLeast(2)).someMethod("called at least twice");
        verify(mock, times(5)).someMethod("called five times");
        verify(mock, atMost(3)).someMethod("called at most 3 times");

作者：EdvardHua
链接：http://www.jianshu.com/p/f6e3ab9719b9
來源：简书
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。


Mockito使用指南
http://blog.csdn.net/shensky711/article/details/52771493------------very good


 使用junit+mockito进行mock测试实例
 http://blog.csdn.net/ruangong1203/article/details/50243477
 http://blog.csdn.net/victor_cindy1/article/details/52126161－－－－最好

http://stackoverflow.com/questions/32820546/mock-object-method-call-using-spring-boot-and-mockito
http://stackoverflow.com/questions/2457239/injecting-mockito-mocks-into-a-spring-bean
public class ProductCompositeIntegrationTest {
    @InjectMocks
    private ProductCompositeIntegration productIntegration;

    @Mock
    private ServiceUtils util;

    private MockRestServiceServer mockServer;

    private RestTemplate restTemplate = new RestTemplate();

    @Before
    public void init() {
        MockitoAnnotations.initMocks(this);
        mockServer = MockRestServiceServer.createServer(restTemplate);
        productIntegration.setRestTemplate(restTemplate);
    }

    @Test
    public void someTests() {
        when(util.getServiceUrl("product")).thenReturn(URI.create("http://localhost:8080/test"));
        //Test code...
    }
}

@Mock, @InjectMocks, @MockBean

   @Before
    public void before() {
        myDAOMock = Mockito.mock(MyDAO.class);
        ReflectionTestUtils.setField(myService, "myDAO", myDAOMock);
    }
    
 http://pwind.iteye.com/blog/1275159   
 Mockito简单易用易上手，所以就把Spring和Mockito组合做单元测试，Mocked对象也交给Spring统一管理。好处至少有：使单元测试类的环境和应用实际的环境保持一致性。开发人员就不用另外增加额外的配置，也可以少一些代码。单元测试类通过了，相应的应用类也就ok（Spring的相关配置也ok）。
 
 Cobertura
 http://www.360doc.com/content/16/0819/12/834950_584308841.shtml
 https://github.com/duqicauc/spring-template
 
 http://blog.csdn.net/kingdz618/article/details/65626389---测试翻译
 . For example, you can test service layer objects by stubbing or mocking DAO or Repository interfaces, without needing to access persistent data while running unit tests. 
 
 
 
 mockito中实现部分mock两种方式：spy与callRealMethod()   
 http://blog.csdn.net/aeroleo/article/details/49946999
 
 
 http://sgq0085.iteye.com/blog/2031319
 Stub对象和Mock对象的区别
 
 http://www.cnblogs.com/ansn001/p/4939518.html
 为什么用mocktio
 接口语法简洁、自然。写起来像在说话，很舒服。
文档更完整。让学习曲线更简单。
可以进行参数化。在很多情况下，不想关心具体的参数是什么。
mock的思路更舒服。废弃了陈旧的“录制——重放”的方法，使用的“期望——执行——断言”更自然的方法。

    Stub对象用来提供测试时所需要的测试数据，可以对各种交互设置相应的回应。例如我们可以设置方法调用的返回值等等。Mockito中when(…).thenReturn(…)。这样的语法便是设置方法调用的返回值。另外也可以设置方法在何时调用会抛异常等。
    Mock对象用来验证测试中所依赖对象间的交互是否能够达到预期。Mockito中用verify(…).methodXxx(…) 语法来验证 methodXxx 方法是否按照预期进行了调用。

http://chenhailong.iteye.com/blog/1698631    
Mockito怎么样Mock返回值为空的方法    

一般不用对 void 方法打桩, 事后 verify 就行
https://unmi.cc/mockito-how-to-mock-void-method/



@Value("#{myProps[‘default.url']}")
private String defaultUrl;
In test method (qualified name just for completeness here):

org.springframework.test.util.ReflectionTestUtils.setField(
        myClassUnderTest, "defaultUrl", "url123");
// Note: Don't use MyClassUnderTest.class
// Note: Don't use the referenced string "#{myProps[‘default.url']}", 
//       but simply the field name "defaultUrl"

You can also mock your property configuration into your test class


How do I mock an autowired @Value field in Spring with Mockito?

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration({ "classpath:test-context.xml" })
public class MyTest 
{ 
   @Configuration
   public static class MockConfig{
       @Bean
       public Properties myProps(){
             Properties properties = new Properties();
             properties.setProperty("default.url", "myUrl");
             properties.setProperty("property.value2", "value2");
             return properties;
        }
   }
   @Value("#{myProps['default.url']}")
   private String defaultUrl;

   @Test
   public void testValue(){
       Assert.assertEquals("myUrl", defaultUrl);
   }
}



for sendRedirect:
http://blog.sina.com.cn/s/blog_60e4b3a90101aeyk.html
http://blog.csdn.net/chengzhezhijian/article/details/50947761
http://www.51testing.com/html/08/134208-227141.html
verify:
      verify(response).sendRedirect(REDIRECT_URL);
        verify(response, never()).sendError(401);
        
        
        
 JUnit + Mockito 单元测试（三）
 http://blog.csdn.net/zhangxin09/article/details/42487319
 http://blog.csdn.net/ruangong1203/article/details/50243477
 http://blog.csdn.net/ruangong1203/article/details/50243477
 
 java assert responseEntity
 Assert.assertEquals(responseEntity.getStatusCode().toString(), "200");
 
 http://www.programcreek.com/java-api-examples/index.php?api=org.springframework.http.ResponseEntity
 ResponseEntity<Object> responseEntityDeletion = digestRestTemplate
            .exchange(URL + "idm/servicecomposition/" + SERVICECOMPID,
                    HttpMethod.DELETE, deletionEntity, Object.class);
                    
 http://jinnianshilongnian.iteye.com/blog/2007180
 RestTemplate客户端测试
 proxy webservice                   
 
 
 mockito参数 HttpSevletRequest
 Mockito.mock(HttpServletRequest.class);    
 
 
 http://code.google.com/p/mockito/
 5分钟了解Mockito
 http://liuzhijun.iteye.com/blog/1512780－－－－－－－－－－－－－－－－－ok完整   
 
 5分钟了解Mockito
 http://liuzhijun.iteye.com/blog/1512780-----------good
 https://martinfowler.com/articles/mocksArentStubs.html