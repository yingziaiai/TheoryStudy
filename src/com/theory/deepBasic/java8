@FunctionalInterface
http://blog.csdn.net/aitangyong/article/details/54137067


 jdk1.8 新特性之 forEach 循环遍历
 http://blog.csdn.net/dounine/article/details/53357914
 
 List<Integer> numbers = new ArrayList<>();

//no.1
for(Integer number : numbers){
    System.out.println(number);
}

//no.2
for(int index=0,len=numbers.size();index<len;index++){
    System.out.println(numbers.get(index));
}

使用jdk1.8后，可这么写

//no.1
numbers.forEach((Integer integer) -> {
    System.out.println(integer);
});

//no.2
numbers.forEach(integer -> {
    System.out.println(integer);
});

//no.3
numbers.forEach(integer -> System.out.println(integer));

//no.4
numbers.forEach(System.out::println);

//no.5
numbers.forEach(new MyConsumer());


java 1.8 Stream
http://blog.csdn.net/chszs/article/details/47038607
https://www.ibm.com/developerworks/cn/java/j-lo-java8streamapi/-------------------------good
persons.stream().
map(Person::getName).limit(10).skip(3).collect(Collectors.toList());

抽取对象中所有的id的集合

1
List<Long> idList = AList.stream.map(A::getId).collect(Collectors.toList());

Ranges and Looping with IntStream
https://www.codeproject.com/Articles/792036/WebControls/

Java 8：不要再用循环了
http://www.importnew.com/14841.html------------------good
http://blog.csdn.net/zhou85xin/article/details/52171190
java8 stream ,filter 等功能代替for循环-----------------------------good
 Java8新特性——StreamAPI(二)
 http://blog.csdn.net/u010425776/article/details/52346644


Java 8新特性终极指南
http://www.cnblogs.com/pkufork/p/java_8.html
http://www.importnew.com/11908.html#streams

 Java 8 Stream 流已被操作或关闭
 http://blog.csdn.net/hatsune_miku_/article/details/73433261
 
 Java 8 Stream Tutorial--转(How streams work-Different kind of streams--Processing Order--Why order matters)-----一种比较好的思路
 
 http://www.cnblogs.com/davidwang456/p/4760559.html
 
 
 java 8 循环操作List/Map
 http://blog.csdn.net/u011659172/article/details/52587064
 https://baijiahao.baidu.com/s?id=1565072394435713&wfr=spider&for=pc
 
 
 
  java8 遍历数组的几种方式
  http://blog.csdn.net/u011277123/article/details/69220634
  
  
  http://www.importnew.com/14841.html---------------good, could compare
  Java 8：不要再用循环了
  
  java8 list match
  http://blog.csdn.net/sunhuwh/article/details/50610792----------------very good
  List<Person> persons = new ArrayList();
persons.add(new Person(1, "name" + 1, 10));
persons.add(new Person(2, "name" + 2, 21));
persons.add(new Person(3, "name" + 3, 34));
persons.add(new Person(4, "name" + 4, 6));
persons.add(new Person(5, "name" + 5, 55));
boolean isAllAdult = persons.stream().
 allMatch(p -> p.getAge() > 18);
System.out.println("All are adult? " + isAllAdult);
boolean isThereAnyChild = persons.stream().
 anyMatch(p -> p.getAge() < 12);
System.out.println("Any child? " + isThereAnyChild);


在Java中如何高效的判断数组中是否包含某个元素
http://www.importnew.com/18700.html-----------------高效？

去重
根据对象的属性去重

http://blog.csdn.net/jiaobuchong/article/details/54412094
Java 8 stream()分组，过滤筛选 List<Object> 根据Object 中的某几个属性作为条件进行分组 去重过滤
http://blog.csdn.net/java_huilong/article/details/59056611
https://www.2cto.com/kf/201612/573707.html
完美解决Java中List集合去除重复的JavaBean对象某些属性值方案
http://blog.csdn.net/jiaobuchong/article/details/54412094
List<Person> unique = persons.stream().collect(
                collectingAndThen(
                        toCollection(() -> new TreeSet<>(comparingLong(Person::getId))), ArrayList::new)
        );