http://www.cnblogs.com/lxboy2009/p/5943759.html
会话管理---Cookie与Session

session cookie example:
http://blog.csdn.net/xj626852095/article/details/16825659


http://www.open-open.com/lib/view/open1405483246415.html


jsp ${pageContext.request.requestURI} 取不到值 

JSP中pageContext、request、session、application域中存取值
http://blog.csdn.net/mr_mhl/article/details/41008333


理解session实例：
http://www.cnblogs.com/linguoguo/p/5106618.html
http://www.tuicool.com/articles/vUj2ymb
其中遇到关于pageContext,相对绝对路径问题， request, <form action..跨域提交，
http://blog.csdn.net/q1059081877q/article/details/46626669
<%@ page isELIgnored="false" %>

如果说Cookie机制是通过检查客户身上的“通行证”来确定客户身份的话，
那么Session机制就是通过检查服务器上的“客户明细表”来确认客户身份。
Session相当于程序在服务器上建立的一份客户档案，客户来访的时候只需要查询客户档案表就可以了。

Servlet里通过request.getSession()方法获取该客户的Session，

Servlet中必须使用request来编程式获取HttpSession对象，而JSP中内置了Session隐藏对象，可以直接使用。

session用户登录
http://blog.csdn.net/tang_huan_11/article/details/18941027#

token: http://www.111cn.net/jsp/Java/93329.htm
最近了解下基于 Token 的身份验证，跟大伙分享下。很多大型网站也都在用，比如 Facebook，Twitter，Google+，Github 等等，比起传统的身份验证方法，Token 扩展性更强，也更安全点，非常适合用在 Web 应用或者移动应用上。Token 的中文有人翻译成 “令牌”，我觉得挺好，意思就是，你拿着这个令牌，才能过一些关卡。
传统身份验证的方法
HTTP 是一种没有状态的协议，也就是它并不知道是谁是访问应用。这里我们把用户看成是客户端，客户端使用用户名还有密码通过了身份验证，不过下回这个客户端再发送请求时候，还得再验证一下。
解决的方法就是，当用户请求登录的时候，如果没有问题，我们在服务端生成一条记录，这个记录里可以说明一下登录的用户是谁，然后把这条记录的 ID 号发送给客户端，客户端收到以后把这个 ID 号存储在 Cookie 里，下次这个用户再向服务端发送请求的时候，可以带着这个 Cookie ，这样服务端会验证一个这个 Cookie 里的信息，看看能不能在服务端这里找到对应的记录，如果可以，说明用户已经通过了身份验证，就把用户请求的数据返回给客户端。
上面说的就是 Session，我们需要在服务端存储为登录的用户生成的 Session ，这些 Session 可能会存储在内存，磁盘，或者数据库里。我们可能需要在服务端定期的去清理过期的 Session 。
基于 Token 的身份验证方法
使用基于 Token 的身份验证方法，在服务端不需要存储用户的登录记录。大概的流程是这样的：
客户端使用用户名跟密码请求登录
服务端收到请求，去验证用户名与密码
验证成功后，服务端会签发一个 Token，再把这个 Token 发送给客户端
客户端收到 Token 以后可以把它存储起来，比如放在 Cookie 里或者 Local Storage 里
客户端每次向服务端请求资源的时候需要带着服务端签发的 Token
服务端收到请求，然后去验证客户端请求里面带着的 Token，如果验证成功，就向客户端返回请求的数据


重复提交：
Session Token机制 ：http://blog.chinaunix.net/uid-26642709-id-3061264.html


pageContext的用法
http://blog.csdn.net/jrdgogo/article/details/52065267

java层面的理解：
SessionUtil Tomcat 生成 session id 的算法
http://blog.csdn.net/liang0000zai/article/details/51493744

纯理论：
http://blog.csdn.net/canot/article/details/50667793
http://blog.csdn.net/frankaqi/article/details/49535207

分析查看会话 请求 工具
http://www.docin.com/p-1151167860.html
http://blog.csdn.net/hbzh2008/article/details/9057785

相对路径，绝对路径：
http://www.cnblogs.com/langtianya/archive/2013/03/04/2942515.html
http://www.cnblogs.com/hy1988/p/5811445.html

http://docs.oracle.com/javaee/5/tutorial/doc/bnaon.html

application/x-www-form-urlencoded

action:
Action 中获取表单提交数据的三种方式：
http://blog.csdn.net/qq_25827845/article/details/53138905
跨域提交 action  pageContext.request

ServletConfig讲解
http://www.cnblogs.com/xdp-gacl/p/3763559.html

http://blog.csdn.net/he1009048700/article/details/7086739
  jsp中的request.getContextPath() 

图解 & 深入浅出 JavaWeb：Servlet必会必知 
https://my.oschina.net/forMemory/blog/496940


session原理及实现共享
http://blog.csdn.net/zhuanshenweiliu/article/details/38844741----------------------非常清晰贴切
http协议是无状态的，即你连续访问某个网页100次和访问1次对服务器来说是没有区别对待的，因为它记不住你。

那么，在一些场合，确实需要服务器记住当前用户怎么办？比如用户登录邮箱后，接下来要收邮件、写邮件，总不能每次操作都让用户输入用户名和密码吧，为了解决这个问题，session的方案就被提了出来，事实上它并不是什么新技术，而且也不能脱离http协议以及任何现有的web技术。

原理很简单，假设你访问网页时就像逛澡堂，第一次进去你是没有钥匙的，这个时候你交了钱服务台就分配一把钥匙给你，你走到哪里都要带上，因为这是你身份的唯一标识，接下来你用这把钥匙可以去打开一个专有的储物柜存储你的衣物，游完泳，你再用钥匙去打开柜子拿出衣物，最后离开游泳池时，把钥匙归还，你的这次游泳的过程就是一次session，或者叫做会话，在这个例子中，钥匙就是session的key，而储物柜可以理解为存储用户会话信息的介质。

那么在web server中如何实现session呢？想必看了上面的例子你会很容易理解，主要是解决两个问题，一个是钥匙的问题，一个是存储用户信息的问题。对于第一个问题，即什么东西可以让你每次请求都会自动带到服务器呢？如果你比较了解http协议，那么答案一目了然，就是cookie，如果你想为用户建立一次会话，可以在用户授权成功时给他一个cookie，叫做会话id，它当然是唯一的，比如php就会为建立会话的用户默认set一个名为phpsessid，值看起来为一个随机字符串的cookie，如果下次发现用户带了这个cookie，服务器就知道，哎呀，刚刚这位顾客来了。

剩下的是解决第二个问题，即如何存储用户的信息，服务器知道会话id为abc的用户来了，那abc想存储自己的私人信息，比如购物车信息，如何处理？这个时候可以用内存、也可以用文件，也可以用数据库了，但有个要求是，数据需要用用户的会话id即可取到，比如php就默认会把会话id为abc的用户会话数据存储到/tmp/phpsess_abc的文件里面，每次读取都要反序列化程序可以理解的数据，写的时候又需要序列化为持久的数据格式。



cookie, session, JsessionID:
http://blog.csdn.net/yanghongchang_/article/details/11973557

jsessionid的困扰
http://2277259257.iteye.com/blog/2236878

cookie的setHttpOnly, secure, expire, path...
http://www.cnblogs.com/tianguook/archive/2013/11/30/3451609.html

java操作Cookie,进行添加、读取、删除操作---domain, path
http://blog.csdn.net/ge_zhiqiang/article/details/8139521

cookie的secure属性详解, httponly
http://www.jb51.net/article/63697.htm
https://stackoverflow.com/questions/39252924/add-secure-flag-to-jsessionid-cookie-in-spring-automatically
http://blog.csdn.net/zzzmmmkkk/article/details/10862949